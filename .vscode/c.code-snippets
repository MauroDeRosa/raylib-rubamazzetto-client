{
	"Raylib Scene Header": {
		"prefix": "RaySceneHeader",
		"scope": "c",
		"body": [
		"#include \"Scene.h\"\n",
		"void ${TM_FILENAME_BASE:default}Start();",
		"void ${TM_FILENAME_BASE:default}Update();",
		"void ${TM_FILENAME_BASE:default}FixedUpdate();",
		"void ${TM_FILENAME_BASE:default}Render();",
		"void ${TM_FILENAME_BASE:default}Exit();",
		"",
		"DefineScene(${TM_FILENAME_BASE:default}, \"${TM_FILENAME_BASE:default}\",  ${TM_FILENAME_BASE:default}Start, ${TM_FILENAME_BASE:default}Update, ${TM_FILENAME_BASE:default}FixedUpdate, ${TM_FILENAME_BASE:default}Render, ${TM_FILENAME_BASE:default}Exit);"	
		],
		"description": "A Scene Header for my SceneManager"
	},
	"Raylib Scene Source": {
		"prefix": "RaySceneSource",
		"scope": "c",
		"body": [
			"#include \"Scene/${TM_FILENAME_BASE:default}.h\" \n",
			
			"struct ${TM_FILENAME_BASE:default}Data\n{",
			"\t// insert your scene variables here",
			"\tint example;",
			"}; struct ${TM_FILENAME_BASE:default}Data _${TM_FILENAME_BASE:default}Data;",
			"void ${TM_FILENAME_BASE:default}Start()\n{\n\tstruct ${TM_FILENAME_BASE:default}Data* $ = &_${TM_FILENAME_BASE:default}Data;\n\t\n}\n",
			"void ${TM_FILENAME_BASE:default}Update()\n{\n\tstruct ${TM_FILENAME_BASE:default}Data* $ = &_${TM_FILENAME_BASE:default}Data;\n\t\n}\n",
			"void ${TM_FILENAME_BASE:default}FixedUpdate()\n{\n\tstruct ${TM_FILENAME_BASE:default}Data* $ = &_${TM_FILENAME_BASE:default}Data;\n\t\n}\n",
			"void ${TM_FILENAME_BASE:default}Render()\n{\n\tstruct ${TM_FILENAME_BASE:default}Data* $ = &_${TM_FILENAME_BASE:default}Data;\n\t\n}\n",
			"void ${TM_FILENAME_BASE:default}Exit()\n{\n\tstruct ${TM_FILENAME_BASE:default}Data* $ = &_${TM_FILENAME_BASE:default}Data;\n\t\n}\n",
		],
		"description": "A Scene Source for my SceneManager"
	},
	"LogInfo": {
		"prefix": "loginf",
		"scope": "c",
		"body": [
			"Log(LOG_INFO, ${1:prefix} ${2:message}${3:, args});"
		],
		"description": "Log(LOG_INFO, PREFIX_MACRO \"STRING\", ...) snippet"
	},
	"LogWarning": {
		"prefix": "logwar",
		"scope": "c",
		"body": [
			"Log(LOG_WARNING, ${1:prefix} ${2:message}${3:, args});"
		],
		"description": "Log(LOG_WARNING, PREFIX_MACRO \"STRING\", ...) snippet"
	},
	"LogError": {
		"prefix": "logerr",
		"scope": "c",
		"body": [
			"Log(LOG_ERROR, ${1:prefix} ${2:message}${3:, args});"
		],
		"description": "Log(LOG_ERROR, PREFIX_MACRO \"STRING\", ...) snippet"
	}
}