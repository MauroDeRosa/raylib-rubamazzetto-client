.TH "include/external/external/lz4.h" 3 "Sun May 8 2022" "Ruba Mazzetto" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/external/external/lz4.h
.SH SYNOPSIS
.br
.PP
\fC#include <stddef\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBLZ4_stream_t_internal\fP"
.br
.ti -1c
.RI "struct \fBLZ4_streamDecode_t_internal\fP"
.br
.ti -1c
.RI "union \fBLZ4_stream_u\fP"
.br
.ti -1c
.RI "union \fBLZ4_streamDecode_u\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBLZ4_H_2983827168210\fP"
.br
.ti -1c
.RI "#define \fBLZ4LIB_VISIBILITY\fP"
.br
.ti -1c
.RI "#define \fBLZ4LIB_API\fP   \fBLZ4LIB_VISIBILITY\fP"
.br
.ti -1c
.RI "#define \fBLZ4_VERSION_MAJOR\fP   1    /* for breaking interface changes  */"
.br
.ti -1c
.RI "#define \fBLZ4_VERSION_MINOR\fP   9    /* for new (non\-breaking) interface capabilities */"
.br
.ti -1c
.RI "#define \fBLZ4_VERSION_RELEASE\fP   3    /* for tweaks, bug\-fixes, or development */"
.br
.ti -1c
.RI "#define \fBLZ4_VERSION_NUMBER\fP   (\fBLZ4_VERSION_MAJOR\fP *100*100 + \fBLZ4_VERSION_MINOR\fP *100 + \fBLZ4_VERSION_RELEASE\fP)"
.br
.ti -1c
.RI "#define \fBLZ4_LIB_VERSION\fP   \fBLZ4_VERSION_MAJOR\&.LZ4_VERSION_MINOR\&.LZ4_VERSION_RELEASE\fP"
.br
.ti -1c
.RI "#define \fBLZ4_QUOTE\fP(str)   #str"
.br
.ti -1c
.RI "#define \fBLZ4_EXPAND_AND_QUOTE\fP(str)   \fBLZ4_QUOTE\fP(str)"
.br
.ti -1c
.RI "#define \fBLZ4_VERSION_STRING\fP   \fBLZ4_EXPAND_AND_QUOTE\fP(\fBLZ4_LIB_VERSION\fP)"
.br
.ti -1c
.RI "#define \fBLZ4_MEMORY_USAGE_MIN\fP   10"
.br
.ti -1c
.RI "#define \fBLZ4_MEMORY_USAGE_DEFAULT\fP   14"
.br
.ti -1c
.RI "#define \fBLZ4_MEMORY_USAGE_MAX\fP   20"
.br
.ti -1c
.RI "#define \fBLZ4_MEMORY_USAGE\fP   \fBLZ4_MEMORY_USAGE_DEFAULT\fP"
.br
.ti -1c
.RI "#define \fBLZ4_MAX_INPUT_SIZE\fP   0x7E000000   /* 2 113 929 216 bytes */"
.br
.ti -1c
.RI "#define \fBLZ4_COMPRESSBOUND\fP(\fBisize\fP)   ((unsigned)(\fBisize\fP) > (unsigned)\fBLZ4_MAX_INPUT_SIZE\fP ? 0 : (\fBisize\fP) + ((\fBisize\fP)/255) + 16)"
.br
.ti -1c
.RI "#define \fBLZ4_DECODER_RING_BUFFER_SIZE\fP(maxBlockSize)   (65536 + 14 + (maxBlockSize))  /* for static allocation; maxBlockSize presumed valid */"
.br
.ti -1c
.RI "#define \fBLZ4_H_98237428734687\fP"
.br
.ti -1c
.RI "#define \fBLZ4_HASHLOG\fP   (\fBLZ4_MEMORY_USAGE\fP\-2)"
.br
.ti -1c
.RI "#define \fBLZ4_HASHTABLESIZE\fP   (1 << \fBLZ4_MEMORY_USAGE\fP)"
.br
.ti -1c
.RI "#define \fBLZ4_HASH_SIZE_U32\fP   (1 << \fBLZ4_HASHLOG\fP)       /* required as macro for static allocation */"
.br
.ti -1c
.RI "#define \fBLZ4_STREAMSIZE\fP   ((1UL << \fBLZ4_MEMORY_USAGE\fP) + 32)  /* static size, for inter\-version compatibility */"
.br
.ti -1c
.RI "#define \fBLZ4_STREAMSIZE_VOIDP\fP   (\fBLZ4_STREAMSIZE\fP / sizeof(void*))"
.br
.ti -1c
.RI "#define \fBLZ4_STREAMDECODESIZE_U64\fP   (4 + ((sizeof(void*)==16) ? 2 : 0) /*AS\-400*/ )"
.br
.ti -1c
.RI "#define \fBLZ4_STREAMDECODESIZE\fP   (\fBLZ4_STREAMDECODESIZE_U64\fP * sizeof(unsigned long long))"
.br
.ti -1c
.RI "#define \fBLZ4_DEPRECATED\fP(message)   /* disabled */"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef union \fBLZ4_stream_u\fP \fBLZ4_stream_t\fP"
.br
.ti -1c
.RI "typedef union \fBLZ4_streamDecode_u\fP \fBLZ4_streamDecode_t\fP"
.br
.ti -1c
.RI "typedef signed char \fBLZ4_i8\fP"
.br
.ti -1c
.RI "typedef unsigned char \fBLZ4_byte\fP"
.br
.ti -1c
.RI "typedef unsigned short \fBLZ4_u16\fP"
.br
.ti -1c
.RI "typedef unsigned int \fBLZ4_u32\fP"
.br
.ti -1c
.RI "typedef struct \fBLZ4_stream_t_internal\fP \fBLZ4_stream_t_internal\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_versionNumber\fP (void)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP const char * \fBLZ4_versionString\fP (void)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_compress_default\fP (const char *src, char *\fBdst\fP, int \fBsrcSize\fP, int dstCapacity)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_decompress_safe\fP (const char *src, char *\fBdst\fP, int \fBcompressedSize\fP, int dstCapacity)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_compressBound\fP (int \fBinputSize\fP)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_compress_fast\fP (const char *src, char *\fBdst\fP, int \fBsrcSize\fP, int dstCapacity, int acceleration)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_sizeofState\fP (void)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_compress_fast_extState\fP (void *state, const char *src, char *\fBdst\fP, int \fBsrcSize\fP, int dstCapacity, int acceleration)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_compress_destSize\fP (const char *src, char *\fBdst\fP, int *srcSizePtr, int targetDstSize)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_decompress_safe_partial\fP (const char *src, char *\fBdst\fP, int \fBsrcSize\fP, int targetOutputSize, int dstCapacity)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP \fBLZ4_stream_t\fP * \fBLZ4_createStream\fP (void)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_freeStream\fP (\fBLZ4_stream_t\fP *streamPtr)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP void \fBLZ4_resetStream_fast\fP (\fBLZ4_stream_t\fP *streamPtr)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_loadDict\fP (\fBLZ4_stream_t\fP *streamPtr, const char *dictionary, int dictSize)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_compress_fast_continue\fP (\fBLZ4_stream_t\fP *streamPtr, const char *src, char *\fBdst\fP, int \fBsrcSize\fP, int dstCapacity, int acceleration)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_saveDict\fP (\fBLZ4_stream_t\fP *streamPtr, char *safeBuffer, int maxDictSize)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP \fBLZ4_streamDecode_t\fP * \fBLZ4_createStreamDecode\fP (void)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_freeStreamDecode\fP (\fBLZ4_streamDecode_t\fP *LZ4_stream)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_setStreamDecode\fP (\fBLZ4_streamDecode_t\fP *LZ4_streamDecode, const char *dictionary, int dictSize)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_decoderRingBufferSize\fP (int maxBlockSize)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_decompress_safe_continue\fP (\fBLZ4_streamDecode_t\fP *LZ4_streamDecode, const char *src, char *\fBdst\fP, int \fBsrcSize\fP, int dstCapacity)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_decompress_safe_usingDict\fP (const char *src, char *\fBdst\fP, int \fBsrcSize\fP, int dstCapcity, const char *dictStart, int dictSize)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP \fBLZ4_stream_t\fP * \fBLZ4_initStream\fP (void *buffer, size_t size)"
.br
.ti -1c
.RI "\fBLZ4_DEPRECATED\fP ('use \fBLZ4_compress_default\fP() instead') LZ4LIB_API int \fBLZ4_compress\fP(const char *src"
.br
.ti -1c
.RI "\fBLZ4_DEPRECATED\fP ('use \fBLZ4_compress_fast_extState\fP() instead') LZ4LIB_API int \fBLZ4_compress_withState\fP(void *state"
.br
.ti -1c
.RI "\fBLZ4_DEPRECATED\fP ('use \fBLZ4_compress_fast_continue\fP() instead') LZ4LIB_API int \fBLZ4_compress_continue\fP(\fBLZ4_stream_t\fP *LZ4_streamPtr"
.br
.ti -1c
.RI "\fBLZ4_DEPRECATED\fP ('use \fBLZ4_decompress_fast\fP() instead') LZ4LIB_API int \fBLZ4_uncompress\fP(const char *\fBsource\fP"
.br
.ti -1c
.RI "\fBLZ4_DEPRECATED\fP ('use \fBLZ4_decompress_safe\fP() instead') LZ4LIB_API int \fBLZ4_uncompress_unknownOutputSize\fP(const char *\fBsource\fP"
.br
.ti -1c
.RI "\fBLZ4_DEPRECATED\fP ('Use \fBLZ4_createStream\fP() instead') LZ4LIB_API void *\fBLZ4_create\fP(char *\fBinputBuffer\fP)"
.br
.ti -1c
.RI "\fBLZ4_DEPRECATED\fP ('Use \fBLZ4_resetStream\fP() instead') LZ4LIB_API int \fBLZ4_resetStreamState\fP(void *state"
.br
.ti -1c
.RI "\fBLZ4_DEPRECATED\fP ('Use \fBLZ4_saveDict\fP() instead') LZ4LIB_API char *\fBLZ4_slideInputBuffer\fP(void *state)"
.br
.ti -1c
.RI "\fBLZ4_DEPRECATED\fP ('use \fBLZ4_decompress_safe_usingDict\fP() instead') LZ4LIB_API int \fBLZ4_decompress_safe_withPrefix64k\fP(const char *src"
.br
.ti -1c
.RI "\fBLZ4_DEPRECATED\fP ('use \fBLZ4_decompress_fast_usingDict\fP() instead') LZ4LIB_API int \fBLZ4_decompress_fast_withPrefix64k\fP(const char *src"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_decompress_fast\fP (const char *src, char *\fBdst\fP, int \fBoriginalSize\fP)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_decompress_fast_continue\fP (\fBLZ4_streamDecode_t\fP *LZ4_streamDecode, const char *src, char *\fBdst\fP, int \fBoriginalSize\fP)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP int \fBLZ4_decompress_fast_usingDict\fP (const char *src, char *\fBdst\fP, int \fBoriginalSize\fP, const char *dictStart, int dictSize)"
.br
.ti -1c
.RI "\fBLZ4LIB_API\fP void \fBLZ4_resetStream\fP (\fBLZ4_stream_t\fP *streamPtr)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "char * \fBdest\fP"
.br
.ti -1c
.RI "char int \fBsrcSize\fP"
.br
.ti -1c
.RI "char int int \fBmaxOutputSize\fP"
.br
.ti -1c
.RI "const char * \fBsource\fP"
.br
.ti -1c
.RI "const char char int \fBinputSize\fP"
.br
.ti -1c
.RI "char int \fBoutputSize\fP"
.br
.ti -1c
.RI "char int \fBisize\fP"
.br
.ti -1c
.RI "char * \fBinputBuffer\fP"
.br
.ti -1c
.RI "char * \fBdst\fP"
.br
.ti -1c
.RI "char int \fBcompressedSize\fP"
.br
.ti -1c
.RI "char int int \fBmaxDstSize\fP"
.br
.ti -1c
.RI "char int \fBoriginalSize\fP"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define LZ4_COMPRESSBOUND(\fBisize\fP)   ((unsigned)(\fBisize\fP) > (unsigned)\fBLZ4_MAX_INPUT_SIZE\fP ? 0 : (\fBisize\fP) + ((\fBisize\fP)/255) + 16)"

.SS "#define LZ4_DECODER_RING_BUFFER_SIZE(maxBlockSize)   (65536 + 14 + (maxBlockSize))  /* for static allocation; maxBlockSize presumed valid */"

.SS "#define LZ4_DEPRECATED(message)   /* disabled */"
Deprecation warnings
.PP
Deprecated functions make the compiler generate a warning when invoked\&. This is meant to invite users to update their source code\&. Should deprecation warnings be a problem, it is generally possible to disable them, typically with -Wno-deprecated-declarations for gcc or _CRT_SECURE_NO_WARNINGS in Visual\&.
.PP
Another method is to define LZ4_DISABLE_DEPRECATE_WARNINGS before including the header file\&. 
.SS "#define LZ4_EXPAND_AND_QUOTE(str)   \fBLZ4_QUOTE\fP(str)"

.SS "#define LZ4_H_2983827168210"

.SS "#define LZ4_H_98237428734687"

.SS "#define LZ4_HASH_SIZE_U32   (1 << \fBLZ4_HASHLOG\fP)       /* required as macro for static allocation */"

.SS "#define LZ4_HASHLOG   (\fBLZ4_MEMORY_USAGE\fP\-2)"

.SS "#define LZ4_HASHTABLESIZE   (1 << \fBLZ4_MEMORY_USAGE\fP)"

.SS "#define LZ4_LIB_VERSION   \fBLZ4_VERSION_MAJOR\&.LZ4_VERSION_MINOR\&.LZ4_VERSION_RELEASE\fP"

.SS "#define LZ4_MAX_INPUT_SIZE   0x7E000000   /* 2 113 929 216 bytes */"

.SS "#define LZ4_MEMORY_USAGE   \fBLZ4_MEMORY_USAGE_DEFAULT\fP"
LZ4_MEMORY_USAGE : Memory usage formula : N->2^N Bytes (examples : 10 -> 1KB; 12 -> 4KB ; 16 -> 64KB; 20 -> 1MB; ) Increasing memory usage improves compression ratio, at the cost of speed\&. Reduced memory usage may improve speed at the cost of ratio, thanks to better cache locality\&. Default value is 14, for 16KB, which nicely fits into Intel x86 L1 cache 
.SS "#define LZ4_MEMORY_USAGE_DEFAULT   14"

.SS "#define LZ4_MEMORY_USAGE_MAX   20"

.SS "#define LZ4_MEMORY_USAGE_MIN   10"

.SS "#define LZ4_QUOTE(str)   #str"

.SS "#define LZ4_STREAMDECODESIZE   (\fBLZ4_STREAMDECODESIZE_U64\fP * sizeof(unsigned long long))"

.SS "#define LZ4_STREAMDECODESIZE_U64   (4 + ((sizeof(void*)==16) ? 2 : 0) /*AS\-400*/ )"
LZ4_streamDecode_t : information structure to track an LZ4 stream during decompression\&. init this structure using \fBLZ4_setStreamDecode()\fP before first use\&. note : only use in association with static linking ! this definition is not API/ABI safe, and may change in a future version ! 
.SS "#define LZ4_STREAMSIZE   ((1UL << \fBLZ4_MEMORY_USAGE\fP) + 32)  /* static size, for inter\-version compatibility */"
LZ4_stream_t : Do not use below internal definitions directly ! Declare or allocate an LZ4_stream_t instead\&. LZ4_stream_t can also be created using \fBLZ4_createStream()\fP, which is recommended\&. The structure definition can be convenient for static allocation (on stack, or as part of larger structure)\&. Init this structure with \fBLZ4_initStream()\fP before first use\&. note : only use this definition in association with static linking ! this definition is not API/ABI safe, and may change in future versions\&. 
.SS "#define LZ4_STREAMSIZE_VOIDP   (\fBLZ4_STREAMSIZE\fP / sizeof(void*))"

.SS "#define LZ4_VERSION_MAJOR   1    /* for breaking interface changes  */"

.SS "#define LZ4_VERSION_MINOR   9    /* for new (non\-breaking) interface capabilities */"

.SS "#define LZ4_VERSION_NUMBER   (\fBLZ4_VERSION_MAJOR\fP *100*100 + \fBLZ4_VERSION_MINOR\fP *100 + \fBLZ4_VERSION_RELEASE\fP)"

.SS "#define LZ4_VERSION_RELEASE   3    /* for tweaks, bug\-fixes, or development */"

.SS "#define LZ4_VERSION_STRING   \fBLZ4_EXPAND_AND_QUOTE\fP(\fBLZ4_LIB_VERSION\fP)"

.SS "#define LZ4LIB_API   \fBLZ4LIB_VISIBILITY\fP"

.SS "#define LZ4LIB_VISIBILITY"
Introduction
.PP
LZ4 is lossless compression algorithm, providing compression speed >500 MB/s per core, scalable with multi-cores CPU\&. It features an extremely fast decoder, with speed in multiple GB/s per core, typically reaching RAM speed limits on multi-core systems\&.
.PP
The LZ4 compression library provides in-memory compression and decompression functions\&. It gives full buffer control to user\&. Compression can be done in:
.IP "\(bu" 2
a single step (described as Simple Functions)
.IP "\(bu" 2
a single step, reusing a context (described in Advanced Functions)
.IP "\(bu" 2
unbounded multiple steps (described as Streaming compression)
.PP
.PP
\fBlz4\&.h\fP generates and decodes LZ4-compressed blocks (doc/lz4_Block_format\&.md)\&. Decompressing such a compressed block requires additional metadata\&. Exact metadata depends on exact decompression function\&. For the typical case of \fBLZ4_decompress_safe()\fP, metadata includes block's compressed size, and maximum bound of decompressed size\&. Each application is free to encode and pass such metadata in whichever way it wants\&.
.PP
\fBlz4\&.h\fP only handle blocks, it can not generate Frames\&.
.PP
Blocks are different from Frames (doc/lz4_Frame_format\&.md)\&. Frames bundle both blocks and metadata in a specified manner\&. Embedding metadata is required for compressed data to be self-contained and portable\&. Frame format is delivered through a companion API, declared in lz4frame\&.h\&. The \fClz4\fP CLI can only manage frames\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef unsigned char \fBLZ4_byte\fP"

.SS "typedef signed char \fBLZ4_i8\fP"

.SS "typedef union \fBLZ4_stream_u\fP \fBLZ4_stream_t\fP"

.SS "typedef struct \fBLZ4_stream_t_internal\fP \fBLZ4_stream_t_internal\fP"

.SS "typedef union \fBLZ4_streamDecode_u\fP \fBLZ4_streamDecode_t\fP"

.SS "typedef unsigned short \fBLZ4_u16\fP"

.SS "typedef unsigned int \fBLZ4_u32\fP"

.SH "Function Documentation"
.PP 
.SS "\fBLZ4LIB_API\fP int LZ4_compress_default (const char * src, char * dst, int srcSize, int dstCapacity)"
\fBLZ4_compress_default()\fP : Compresses 'srcSize' bytes from buffer 'src' into already allocated 'dst' buffer of size 'dstCapacity'\&. Compression is guaranteed to succeed if 'dstCapacity' >= LZ4_compressBound(srcSize)\&. It also runs faster, so it's a recommended setting\&. If the function cannot compress 'src' into a more limited 'dst' budget, compression stops \fIimmediately\fP, and the function result is zero\&. In which case, 'dst' content is undefined (invalid)\&. srcSize : max supported value is LZ4_MAX_INPUT_SIZE\&. dstCapacity : size of buffer 'dst' (which must be already allocated) 
.PP
\fBReturns\fP
.RS 4
: the number of bytes written into buffer 'dst' (necessarily <= dstCapacity) or 0 if compression fails Note : This function is protected against buffer overflow scenarios (never writes outside 'dst' buffer, nor read outside 'source' buffer)\&. 
.RE
.PP

.SS "\fBLZ4LIB_API\fP int LZ4_compress_destSize (const char * src, char * dst, int * srcSizePtr, int targetDstSize)"
\fBLZ4_compress_destSize()\fP : Reverse the logic : compresses as much data as possible from 'src' buffer into already allocated buffer 'dst', of size >= 'targetDestSize'\&. This function either compresses the entire 'src' content into 'dst' if it's large enough, or fill 'dst' buffer completely with as much data as possible from 'src'\&. note: acceleration parameter is fixed to 'default'\&.
.PP
*srcSizePtr : will be modified to indicate how many bytes where read from 'src' to fill 'dst'\&. New value is necessarily <= input value\&. 
.PP
\fBReturns\fP
.RS 4
: Nb bytes written into 'dst' (necessarily <= targetDestSize) or 0 if compression fails\&.
.RE
.PP
Note : from v1\&.8\&.2 to v1\&.9\&.1, this function had a bug (fixed un v1\&.9\&.2+): the produced compressed content could, in specific circumstances, require to be decompressed into a destination buffer larger by at least 1 byte than the content to decompress\&. If an application uses \fC\fBLZ4_compress_destSize()\fP\fP, it's highly recommended to update liblz4 to v1\&.9\&.2 or better\&. If this can't be done or ensured, the receiving decompression function should provide a dstCapacity which is > decompressedSize, by at least 1 byte\&. See https://github.com/lz4/lz4/issues/859 for details 
.SS "\fBLZ4LIB_API\fP int LZ4_compress_fast (const char * src, char * dst, int srcSize, int dstCapacity, int acceleration)"
\fBLZ4_compress_fast()\fP : Same as \fBLZ4_compress_default()\fP, but allows selection of 'acceleration' factor\&. The larger the acceleration value, the faster the algorithm, but also the lesser the compression\&. It's a trade-off\&. It can be fine tuned, with each successive value providing roughly +~3% to speed\&. An acceleration value of '1' is the same as regular \fBLZ4_compress_default()\fP Values <= 0 will be replaced by LZ4_ACCELERATION_DEFAULT (currently == 1, see \fBlz4\&.c\fP)\&. Values > LZ4_ACCELERATION_MAX will be replaced by LZ4_ACCELERATION_MAX (currently == 65537, see \fBlz4\&.c\fP)\&. 
.SS "\fBLZ4LIB_API\fP int LZ4_compress_fast_continue (\fBLZ4_stream_t\fP * streamPtr, const char * src, char * dst, int srcSize, int dstCapacity, int acceleration)"
\fBLZ4_compress_fast_continue()\fP : Compress 'src' content using data from previously compressed blocks, for better compression ratio\&. 'dst' buffer must be already allocated\&. If dstCapacity >= LZ4_compressBound(srcSize), compression is guaranteed to succeed, and runs faster\&.
.PP
\fBReturns\fP
.RS 4
: size of compressed block or 0 if there is an error (typically, cannot fit into 'dst')\&.
.RE
.PP
Note 1 : Each invocation to \fBLZ4_compress_fast_continue()\fP generates a new block\&. Each block has precise boundaries\&. Each block must be decompressed separately, calling LZ4_decompress_*() with relevant metadata\&. It's not possible to append blocks together and expect a single invocation of LZ4_decompress_*() to decompress them together\&.
.PP
Note 2 : The previous 64KB of source data is \fBassumed\fP to remain present, unmodified, at same address in memory !
.PP
Note 3 : When input is structured as a double-buffer, each buffer can have any size, including < 64 KB\&. Make sure that buffers are separated, by at least one byte\&. This construction ensures that each block only depends on previous block\&.
.PP
Note 4 : If input buffer is a ring-buffer, it can have any size, including < 64 KB\&.
.PP
Note 5 : After an error, the stream status is undefined (invalid), it can only be reset or freed\&. 
.SS "\fBLZ4LIB_API\fP int LZ4_compress_fast_extState (void * state, const char * src, char * dst, int srcSize, int dstCapacity, int acceleration)"

.SS "\fBLZ4LIB_API\fP int LZ4_compressBound (int inputSize)"
\fBLZ4_compressBound()\fP : Provides the maximum size that LZ4 compression may output in a 'worst case' scenario (input data not compressible) This function is primarily useful for memory allocation purposes (destination buffer size)\&. Macro \fBLZ4_COMPRESSBOUND()\fP is also provided for compilation-time evaluation (stack memory allocation for example)\&. Note that \fBLZ4_compress_default()\fP compresses faster when dstCapacity is >= LZ4_compressBound(srcSize) inputSize : max supported value is LZ4_MAX_INPUT_SIZE return : maximum output size in a 'worst case' scenario or 0, if input size is incorrect (too large or negative) 
.SS "\fBLZ4LIB_API\fP \fBLZ4_stream_t\fP * LZ4_createStream (void)"

.SS "\fBLZ4LIB_API\fP \fBLZ4_streamDecode_t\fP * LZ4_createStreamDecode (void)"
\fBLZ4_createStreamDecode()\fP and \fBLZ4_freeStreamDecode()\fP : creation / destruction of streaming decompression tracking context\&. A tracking context can be re-used multiple times\&. 
.SS "\fBLZ4LIB_API\fP int LZ4_decoderRingBufferSize (int maxBlockSize)"
\fBLZ4_decoderRingBufferSize()\fP : v1\&.8\&.2+ Note : in a ring buffer scenario (optional), blocks are presumed decompressed next to each other up to the moment there is not enough remaining space for next block (remainingSize < maxBlockSize), at which stage it resumes from beginning of ring buffer\&. When setting such a ring buffer for streaming decompression, provides the minimum size of this ring buffer to be compatible with any source respecting maxBlockSize condition\&. 
.PP
\fBReturns\fP
.RS 4
: minimum ring buffer size, or 0 if there is an error (invalid maxBlockSize)\&.
.RE
.PP
\fBLZ4_decoderRingBufferSize()\fP : when setting a ring buffer for streaming decompression (optional scenario), provides the minimum size of this ring buffer to be compatible with any source respecting maxBlockSize condition\&. Note : in a ring buffer scenario, blocks are presumed decompressed next to each other\&. When not enough space remains for next block (remainingSize < maxBlockSize), decoding resumes from beginning of ring buffer\&. 
.PP
\fBReturns\fP
.RS 4
: minimum ring buffer size, or 0 if there is an error (invalid maxBlockSize)\&. 
.RE
.PP

.SS "\fBLZ4LIB_API\fP int LZ4_decompress_fast (const char * src, char * dst, int originalSize)"
Obsolete LZ4_decompress_fast variants (since v1\&.9\&.0) : These functions used to be faster than \fBLZ4_decompress_safe()\fP, but this is no longer the case\&. They are now slower\&. This is because \fBLZ4_decompress_fast()\fP doesn't know the input size, and therefore must progress more cautiously into the input buffer to not read beyond the end of block\&. On top of that \fC\fBLZ4_decompress_fast()\fP\fP is not protected vs malformed or malicious inputs, making it a security liability\&. As a consequence, \fBLZ4_decompress_fast()\fP is strongly discouraged, and deprecated\&.
.PP
The last remaining \fBLZ4_decompress_fast()\fP specificity is that it can decompress a block without knowing its compressed size\&. Such functionality can be achieved in a more secure manner by employing \fBLZ4_decompress_safe_partial()\fP\&.
.PP
Parameters: originalSize : is the uncompressed size to regenerate\&. \fCdst\fP must be already allocated, its size must be >= 'originalSize' bytes\&. 
.PP
\fBReturns\fP
.RS 4
: number of bytes read from source buffer (== compressed size)\&. The function expects to finish at block's end exactly\&. If the source stream is detected malformed, the function stops decoding and returns a negative result\&. note : LZ4_decompress_fast*() requires originalSize\&. Thanks to this information, it never writes past the output buffer\&. However, since it doesn't know its 'src' size, it may read an unknown amount of input, past input buffer bounds\&. Also, since match offsets are not validated, match reads from 'src' may underflow too\&. These issues never happen if input (compressed) data is correct\&. But they may happen if input data is invalid (error or intentional tampering)\&. As a consequence, use these functions in trusted environments with trusted data \fBonly\fP\&. 
.RE
.PP

.SS "\fBLZ4LIB_API\fP int LZ4_decompress_fast_continue (\fBLZ4_streamDecode_t\fP * LZ4_streamDecode, const char * src, char * dst, int originalSize)"

.SS "\fBLZ4LIB_API\fP int LZ4_decompress_fast_usingDict (const char * src, char * dst, int originalSize, const char * dictStart, int dictSize)"

.SS "\fBLZ4LIB_API\fP int LZ4_decompress_safe (const char * src, char * dst, int compressedSize, int dstCapacity)"
\fBLZ4_decompress_safe()\fP : compressedSize : is the exact complete size of the compressed block\&. dstCapacity : is the size of destination buffer (which must be already allocated), presumed an upper bound of decompressed size\&. 
.PP
\fBReturns\fP
.RS 4
: the number of bytes decompressed into destination buffer (necessarily <= dstCapacity) If destination buffer is not large enough, decoding will stop and output an error code (negative value)\&. If the source stream is detected malformed, the function will stop decoding and return a negative result\&. Note 1 : This function is protected against malicious data packets : it will never writes outside 'dst' buffer, nor read outside 'source' buffer, even if the compressed block is maliciously modified to order the decoder to do these actions\&. In such case, the decoder stops immediately, and considers the compressed block malformed\&. Note 2 : compressedSize and dstCapacity must be provided to the function, the compressed block does not contain them\&. The implementation is free to send / store / derive this information in whichever way is most beneficial\&. If there is a need for a different format which bundles together both compressed data and its metadata, consider looking at lz4frame\&.h instead\&. 
.RE
.PP

.SS "\fBLZ4LIB_API\fP int LZ4_decompress_safe_continue (\fBLZ4_streamDecode_t\fP * LZ4_streamDecode, const char * src, char * dst, int srcSize, int dstCapacity)"
LZ4_decompress_*_continue() : These decoding functions allow decompression of consecutive blocks in 'streaming' mode\&. A block is an unsplittable entity, it must be presented entirely to a decompression function\&. Decompression functions only accepts one block at a time\&. The last 64KB of previously decoded data \fImust\fP remain available and unmodified at the memory position where they were decoded\&. If less than 64KB of data has been decoded, all the data must be present\&.
.PP
Special : if decompression side sets a ring buffer, it must respect one of the following conditions :
.IP "\(bu" 2
Decompression buffer size is \fIat least\fP LZ4_decoderRingBufferSize(maxBlockSize)\&. maxBlockSize is the maximum size of any single block\&. It can have any value > 16 bytes\&. In which case, encoding and decoding buffers do not need to be synchronized\&. Actually, data can be produced by any source compliant with LZ4 format specification, and respecting maxBlockSize\&.
.IP "\(bu" 2
Synchronized mode : Decompression buffer size is \fIexactly\fP the same as compression buffer size, and follows exactly same update rule (block boundaries at same positions), and decoding function is provided with exact decompressed size of each block (exception for last block of the stream), \fIthen\fP decoding & encoding ring buffer can have any size, including small ones ( < 64 KB)\&.
.IP "\(bu" 2
Decompression buffer is larger than encoding buffer, by a minimum of maxBlockSize more bytes\&. In which case, encoding and decoding buffers do not need to be synchronized, and encoding ring buffer can have any size, including small ones ( < 64 KB)\&.
.PP
.PP
Whenever these conditions are not possible, save the last 64KB of decoded data into a safe buffer where it can't be modified during decompression, then indicate where this data is saved using \fBLZ4_setStreamDecode()\fP, before decompressing next block\&. 
.SS "\fBLZ4LIB_API\fP int LZ4_decompress_safe_partial (const char * src, char * dst, int srcSize, int targetOutputSize, int dstCapacity)"
\fBLZ4_decompress_safe_partial()\fP : Decompress an LZ4 compressed block, of size 'srcSize' at position 'src', into destination buffer 'dst' of size 'dstCapacity'\&. Up to 'targetOutputSize' bytes will be decoded\&. The function stops decoding on reaching this objective\&. This can be useful to boost performance whenever only the beginning of a block is required\&.
.PP
\fBReturns\fP
.RS 4
: the number of bytes decoded in \fCdst\fP (necessarily <= targetOutputSize) If source stream is detected malformed, function returns a negative result\&.
.RE
.PP
Note 1 : 
.PP
\fBReturns\fP
.RS 4
can be < targetOutputSize, if compressed block contains less data\&.
.RE
.PP
Note 2 : targetOutputSize must be <= dstCapacity
.PP
Note 3 : this function effectively stops decoding on reaching targetOutputSize, so dstCapacity is kind of redundant\&. This is because in older versions of this function, decoding operation would still write complete sequences\&. Therefore, there was no guarantee that it would stop writing at exactly targetOutputSize, it could write more bytes, though only up to dstCapacity\&. Some 'margin' used to be required for this operation to work properly\&. Thankfully, this is no longer necessary\&. The function nonetheless keeps the same signature, in an effort to preserve API compatibility\&.
.PP
Note 4 : If srcSize is the exact size of the block, then targetOutputSize can be any value, including larger than the block's decompressed size\&. The function will, at most, generate block's decompressed size\&.
.PP
Note 5 : If srcSize is \fIlarger\fP than block's compressed size, then targetOutputSize \fBMUST\fP be <= block's decompressed size\&. Otherwise, \fIsilent corruption will occur\fP\&. 
.SS "\fBLZ4LIB_API\fP int LZ4_decompress_safe_usingDict (const char * src, char * dst, int srcSize, int dstCapcity, const char * dictStart, int dictSize)"
LZ4_decompress_*_usingDict() : These decoding functions work the same as a combination of \fBLZ4_setStreamDecode()\fP followed by LZ4_decompress_*_continue() They are stand-alone, and don't need an LZ4_streamDecode_t structure\&. Dictionary is presumed stable : it must remain accessible and unmodified during decompression\&. Performance tip : Decompression speed can be substantially increased when dst == dictStart + dictSize\&. 
.SS "LZ4_DEPRECATED ('use \fBLZ4_compress_default\fP() instead') const"
Obsolete compression functions (since v1\&.7\&.3) 
.SS "LZ4_DEPRECATED ('use \fBLZ4_compress_fast_continue\fP() instead')"

.SS "LZ4_DEPRECATED ('use \fBLZ4_compress_fast_extState\fP() instead')"

.SS "LZ4_DEPRECATED ('Use \fBLZ4_createStream\fP() instead')"

.SS "LZ4_DEPRECATED ('use \fBLZ4_decompress_fast\fP() instead') const"
Obsolete decompression functions (since v1\&.8\&.0) 
.SS "LZ4_DEPRECATED ('use \fBLZ4_decompress_fast_usingDict\fP() instead') const"

.SS "LZ4_DEPRECATED ('use \fBLZ4_decompress_safe\fP() instead') const"

.SS "LZ4_DEPRECATED ('use \fBLZ4_decompress_safe_usingDict\fP() instead') const"
Obsolete streaming decoding functions (since v1\&.7\&.0) 
.SS "LZ4_DEPRECATED ('Use \fBLZ4_resetStream\fP() instead')"

.SS "LZ4_DEPRECATED ('Use \fBLZ4_saveDict\fP() instead')"

.SS "\fBLZ4LIB_API\fP int LZ4_freeStream (\fBLZ4_stream_t\fP * streamPtr)"

.SS "\fBLZ4LIB_API\fP int LZ4_freeStreamDecode (\fBLZ4_streamDecode_t\fP * LZ4_stream)"

.SS "\fBLZ4LIB_API\fP \fBLZ4_stream_t\fP * LZ4_initStream (void * buffer, size_t size)"
\fBLZ4_initStream()\fP : v1\&.9\&.0+ An LZ4_stream_t structure must be initialized at least once\&. This is automatically done when invoking \fBLZ4_createStream()\fP, but it's not when the structure is simply declared on stack (for example)\&.
.PP
Use \fBLZ4_initStream()\fP to properly initialize a newly declared LZ4_stream_t\&. It can also initialize any arbitrary buffer of sufficient size, and will 
.PP
\fBReturns\fP
.RS 4
a pointer of proper type upon initialization\&.
.RE
.PP
Note : initialization fails if size and alignment conditions are not respected\&. In which case, the function will 
.PP
\fBReturns\fP
.RS 4
NULL\&. Note2: An LZ4_stream_t structure guarantees correct alignment and size\&. Note3: Before v1\&.9\&.0, use \fBLZ4_resetStream()\fP instead 
.RE
.PP

.SS "\fBLZ4LIB_API\fP int LZ4_loadDict (\fBLZ4_stream_t\fP * streamPtr, const char * dictionary, int dictSize)"
\fBLZ4_loadDict()\fP : Use this function to reference a static dictionary into LZ4_stream_t\&. The dictionary must remain available during compression\&. \fBLZ4_loadDict()\fP triggers a reset, so any previous data will be forgotten\&. The same dictionary will have to be loaded on decompression side for successful decoding\&. Dictionary are useful for better compression of small data (KB range)\&. While LZ4 accept any input as dictionary, results are generally better when using Zstandard's Dictionary Builder\&. Loading a size of 0 is allowed, and is the same as reset\&. 
.PP
\fBReturns\fP
.RS 4
: loaded dictionary size, in bytes (necessarily <= 64 KB) 
.RE
.PP

.SS "\fBLZ4LIB_API\fP void LZ4_resetStream (\fBLZ4_stream_t\fP * streamPtr)"
\fBLZ4_resetStream()\fP : An LZ4_stream_t structure must be initialized at least once\&. This is done with \fBLZ4_initStream()\fP, or \fBLZ4_resetStream()\fP\&. Consider switching to \fBLZ4_initStream()\fP, invoking \fBLZ4_resetStream()\fP will trigger deprecation warnings in the future\&. 
.SS "\fBLZ4LIB_API\fP void LZ4_resetStream_fast (\fBLZ4_stream_t\fP * streamPtr)"
\fBLZ4_resetStream_fast()\fP : v1\&.9\&.0+ Use this to prepare an LZ4_stream_t for a new chain of dependent blocks (e\&.g\&., \fBLZ4_compress_fast_continue()\fP)\&.
.PP
An LZ4_stream_t must be initialized once before usage\&. This is automatically done when created by \fBLZ4_createStream()\fP\&. However, should the LZ4_stream_t be simply declared on stack (for example), it's necessary to initialize it first, using \fBLZ4_initStream()\fP\&.
.PP
After init, start any new stream with \fBLZ4_resetStream_fast()\fP\&. A same LZ4_stream_t can be re-used multiple times consecutively and compress multiple streams, provided that it starts each new stream with \fBLZ4_resetStream_fast()\fP\&.
.PP
\fBLZ4_resetStream_fast()\fP is much faster than \fBLZ4_initStream()\fP, but is not compatible with memory regions containing garbage data\&.
.PP
Note: it's only useful to call \fBLZ4_resetStream_fast()\fP in the context of streaming compression\&. The \fIextState\fP functions perform their own resets\&. Invoking \fBLZ4_resetStream_fast()\fP before is redundant, and even counterproductive\&. 
.SS "\fBLZ4LIB_API\fP int LZ4_saveDict (\fBLZ4_stream_t\fP * LZ4_dict, char * safeBuffer, int dictSize)"
\fBLZ4_saveDict()\fP : If last 64KB data cannot be guaranteed to remain available at its current memory location, save it into a safer place (char* safeBuffer)\&. This is schematically equivalent to a memcpy() followed by \fBLZ4_loadDict()\fP, but is much faster, because \fBLZ4_saveDict()\fP doesn't need to rebuild tables\&. 
.PP
\fBReturns\fP
.RS 4
: saved dictionary size in bytes (necessarily <= maxDictSize), or 0 if error\&.
.RE
.PP
\fBLZ4_saveDict()\fP : If previously compressed data block is not guaranteed to remain available at its memory location, save it into a safer place (char* safeBuffer)\&. Note : no need to call \fBLZ4_loadDict()\fP afterwards, dictionary is immediately usable, one can therefore call \fBLZ4_compress_fast_continue()\fP right after\&. 
.PP
\fBReturns\fP
.RS 4
: saved dictionary size in bytes (necessarily <= dictSize), or 0 if error\&. 
.RE
.PP

.SS "\fBLZ4LIB_API\fP int LZ4_setStreamDecode (\fBLZ4_streamDecode_t\fP * LZ4_streamDecode, const char * dictionary, int dictSize)"
\fBLZ4_setStreamDecode()\fP : An LZ4_streamDecode_t context can be allocated once and re-used multiple times\&. Use this function to start decompression of a new stream of blocks\&. A dictionary can optionally be set\&. Use NULL or size 0 for a reset order\&. Dictionary is presumed stable : it must remain accessible and unmodified during next decompression\&. 
.PP
\fBReturns\fP
.RS 4
: 1 if OK, 0 if error
.RE
.PP
\fBLZ4_setStreamDecode()\fP : Use this function to instruct where to find the dictionary\&. This function is not necessary if previous data is still available where it was decoded\&. Loading a size of 0 is allowed (same effect as no dictionary)\&. 
.PP
\fBReturns\fP
.RS 4
: 1 if OK, 0 if error 
.RE
.PP

.SS "\fBLZ4LIB_API\fP int LZ4_sizeofState (void)"
\fBLZ4_compress_fast_extState()\fP : Same as \fBLZ4_compress_fast()\fP, using an externally allocated memory space for its state\&. Use \fBLZ4_sizeofState()\fP to know how much memory must be allocated, and allocate it on 8-bytes boundaries (using \fCmalloc()\fP typically)\&. Then, provide this buffer as \fCvoid* state\fP to compression function\&. 
.SS "\fBLZ4LIB_API\fP int LZ4_versionNumber (void)"
library version number; useful to check dll version 
.SS "\fBLZ4LIB_API\fP const char * LZ4_versionString (void)"
library version string; useful to check dll version 
.SH "Variable Documentation"
.PP 
.SS "char int compressedSize"

.SS "char * dest"

.SS "char * dst"

.SS "char* inputBuffer"

.SS "const char char int inputSize"

.SS "char int isize"

.SS "char int int maxDstSize"

.SS "char int int maxOutputSize"

.SS "char int originalSize"

.SS "char int outputSize"

.SS "const char * source"

.SS "char int srcSize"

.SH "Author"
.PP 
Generated automatically by Doxygen for Ruba Mazzetto from the source code\&.
