.TH "source/ResourceManager/ResourceManager.c" 3 "Sun May 8 2022" "Ruba Mazzetto" \" -*- nroff -*-
.ad l
.nh
.SH NAME
source/ResourceManager/ResourceManager.c
.SH SYNOPSIS
.br
.PP
\fC#include 'ResourceManager/ResourceManager\&.h'\fP
.br
\fC#include 'utils/logger\&.h'\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include 'Config\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRESOURCE_MANAGER_PREFIX\fP   \fBLOG_COLOR_YELLOW\fP '[ResourceManager] ' LOG_COLOR_RESET"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBResourceManagerInit\fP ()"
.br
.RI "Initialize the ResourceManager HashMap\&. "
.ti -1c
.RI "int \fBResourceManagerAddResource\fP (\fBResourceType\fP type, const char *name, const char *path)"
.br
.RI "adds a resource of the specified name, type and path to the ResourceManagerMap HashMap "
.ti -1c
.RI "int \fBResourceManagerRemoveResource\fP (\fBResourceType\fP type, const char *name)"
.br
.RI "removes a resource of the specified name and type from the ResourceManagerMap HashMap "
.ti -1c
.RI "int \fBResourceManagerLoad\fP ()"
.br
.RI "iterates through Resource HashMap and call the exact Raylib Load function for each Resource Type "
.ti -1c
.RI "void * \fBResourceManagerGet\fP (\fBResourceType\fP type, const char *name)"
.br
.RI "gets a pointer to the resource data of the specified ResourceType after being loaded through \fBResourceManagerLoad()\fP "
.ti -1c
.RI "int \fBResourceManagerUnload\fP ()"
.br
.RI "iterates through Resource HashMap and call the exact Raylib Unload function for each Resource Type "
.ti -1c
.RI "int \fBResourceManagerDestroy\fP ()"
.br
.RI "iterates through Resource HashMap, dereference HashMap elements and frees memory "
.ti -1c
.RI "char * \fBResourceManagerGetResourceName\fP (\fBResourceType\fP type, const char *name)"
.br
.RI "Get a string in the form 'ResourceType_name'\&. "
.ti -1c
.RI "struct \fBResource_t\fP * \fBResourceManagerGetResourcePointer\fP (char *fullName)"
.br
.ti -1c
.RI "void * \fBResourceManagerGetResourceDataPointer\fP (struct \fBResource_t\fP *resource)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const char * \fBResourceTypeString\fP []"
.br
.ti -1c
.RI "struct \fBResource_t\fP * \fBResourceManagerMap\fP = NULL"
.br
.RI "The Resource HashMap pointer\&. "
.ti -1c
.RI "\fBResourceManager_t\fP \fBResourceManager\fP"
.br
.RI "ResourceManager global variable to access Resource Manager's callbacks\&. "
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define RESOURCE_MANAGER_PREFIX   \fBLOG_COLOR_YELLOW\fP '[ResourceManager] ' LOG_COLOR_RESET"

.SH "Function Documentation"
.PP 
.SS "int ResourceManagerAddResource (\fBResourceType\fP type, const char * name, const char * path)"

.PP
adds a resource of the specified name, type and path to the ResourceManagerMap HashMap 
.PP
\fBParameters\fP
.RS 4
\fItype\fP the type of the Resource to get 
.RE
.PP
\fBSee also\fP
.RS 4
\fBResourceType\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIname\fP the name of the resource to get (key value of the Resource HashMap element) 
.RE
.PP
\fBSee also\fP
.RS 4
\fBResource_t\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIpath\fP the relative path to the Resource file, from the executable location 
.RE
.PP
\fBReturns\fP
.RS 4
int APP_ERROR or APP_WARNING or APP_SUCCESS 
.RE
.PP

.SS "int ResourceManagerDestroy ()"

.PP
iterates through Resource HashMap, dereference HashMap elements and frees memory 
.PP
\fBReturns\fP
.RS 4
int APP_ERROR or APP_WARNING or APP_SUCCESS 
.RE
.PP

.SS "void * ResourceManagerGet (\fBResourceType\fP type, const char * name)"

.PP
gets a pointer to the resource data of the specified ResourceType after being loaded through \fBResourceManagerLoad()\fP 
.PP
\fBParameters\fP
.RS 4
\fItype\fP the type of the Resource to get 
.RE
.PP
\fBSee also\fP
.RS 4
\fBResourceType\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIname\fP the name of the resource to get (key value of the Resource HashMap element) 
.RE
.PP
\fBSee also\fP
.RS 4
\fBResource_t\fP 
.RE
.PP
\fBReturns\fP
.RS 4
void* 
.RE
.PP

.SS "void * ResourceManagerGetResourceDataPointer (struct \fBResource_t\fP * resource)"

.PP
\fBParameters\fP
.RS 4
\fIresource\fP 
.RE
.PP
\fBReturns\fP
.RS 4
void* 
.RE
.PP

.SS "char * ResourceManagerGetResourceName (\fBResourceType\fP type, const char * name)"

.PP
Get a string in the form 'ResourceType_name'\&. 
.PP
\fBParameters\fP
.RS 4
\fItype\fP the type of the Resource to get 
.RE
.PP
\fBSee also\fP
.RS 4
\fBResourceType\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIname\fP the name of the resource to get (key value of the Resource HashMap element) 
.RE
.PP
\fBSee also\fP
.RS 4
\fBResource_t\fP 
.RE
.PP
\fBReturns\fP
.RS 4
char* a string containing 'ResourceType_name' (must be freed) 
.RE
.PP
\fBSee also\fP
.RS 4
\fBResourceType\fP 
.PP
\fBResource_t\fP 
.RE
.PP

.SS "struct \fBResource_t\fP * ResourceManagerGetResourcePointer (char * fullName)"

.PP
\fBParameters\fP
.RS 4
\fIfullName\fP A string in the form 'ResourceType_name' used as key value in the ResourceManagerMap HashMap 
.RE
.PP
\fBReturns\fP
.RS 4
struct Resource_t* The pointer to the Resource element found in Hasmap\&. NULL if nothing was found 
.RE
.PP
\fBSee also\fP
.RS 4
\fBResource_t\fP 
.RE
.PP

.SS "int ResourceManagerInit ()"

.PP
Initialize the ResourceManager HashMap\&. 
.PP
\fBSee also\fP
.RS 4
\fBResourceManagerMap\fP
.RE
.PP
\fBReturns\fP
.RS 4
int APP_ERROR or APP_WARNING or APP_SUCCESS 
.RE
.PP

.SS "int ResourceManagerLoad ()"

.PP
iterates through Resource HashMap and call the exact Raylib Load function for each Resource Type 
.PP
\fBReturns\fP
.RS 4
int APP_ERROR or APP_WARNING or APP_SUCCESS 
.RE
.PP

.SS "int ResourceManagerRemoveResource (\fBResourceType\fP type, const char * name)"

.PP
removes a resource of the specified name and type from the ResourceManagerMap HashMap 
.PP
\fBParameters\fP
.RS 4
\fItype\fP the type of the Resource to get 
.RE
.PP
\fBSee also\fP
.RS 4
\fBResourceType\fP 
.RE
.PP
\fBParameters\fP
.RS 4
\fIname\fP the name of the resource to get (key value of the Resource HashMap element) 
.RE
.PP
\fBSee also\fP
.RS 4
\fBResource_t\fP 
.RE
.PP
\fBReturns\fP
.RS 4
int APP_ERROR or APP_WARNING or APP_SUCCESS 
.RE
.PP

.SS "int ResourceManagerUnload ()"

.PP
iterates through Resource HashMap and call the exact Raylib Unload function for each Resource Type 
.PP
\fBReturns\fP
.RS 4
int APP_ERROR or APP_WARNING or APP_SUCCESS 
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "\fBResourceManager_t\fP ResourceManager"
\fBInitial value:\fP
.PP
.nf
= {
    ResourceManagerInit,            
    ResourceManagerAddResource,     
    ResourceManagerRemoveResource,  
    ResourceManagerLoad,            
    ResourceManagerGet,             
    ResourceManagerUnload,          
    ResourceManagerDestroy,         
}
.fi
.PP
ResourceManager global variable to access Resource Manager's callbacks\&. 
.SS "struct \fBResource_t\fP* ResourceManagerMap = NULL"

.PP
The Resource HashMap pointer\&. 
.SS "const char* ResourceTypeString[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
= {
    "Image",     
    "Texture2D", 
    "Font",      
    "Wave",      
    "Sound",     
    "Music"      
}
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Ruba Mazzetto from the source code\&.
